Descrição da atividade de programação sobre ponto flutuante:

Linguagem: Python

Porção da linguagem que será utilizada nessa atividade(não é um limite, é uma dica):

format()
if ... elif...else
&
==
+=
>
<
>>
<<
**
for
zip()
range()
print()

Exemplo:
for x, y in zip(range(-1,-5,-1), range(3,-1,-1)): [x, y, x+y,x-y, x**y]

Você deve criar uma função em Python seguindo o exemplo abaixo, mantenha o nome como está no exemplo.
entre o : e o return; coloque seu código.

Exemplo de Criação de função em python:

Crie um arquivo de nome pf_interpreter.py
nele copie e cole o trecho abaixo (até o return;) e salve.

def interpreter( i ) :

# seu código deve vir aqui (retire esses comentários do código a ser enviado)
# e nele você deve:
# colocar comentários explicativos 
# testar o bit de sinal
# testar e tratar o expoente para identificar os casos
# normalizados --> expoente dentro da faixa 001 a 110 ou seja de -2 a 3
# não-normalizados --> expoente 000
# + infinito
# - infinito
# indeterminação
# e NAN

#OBS: use i pensando nele como um byte, conforme a conveniência:
# ele pode ser adicionado a string str que será impressa como saída str = format(i, '08b')
# ou ser manipulado para isolar apenas alguns bits (i & 0x7F)
# também pode combinar várias dessas operações format(((i & 0x7F) >> 1)) ou if ((i & 0x7F) >> 8):
# dessa forma você nunca perde o valor original da variável i pois as operações são feitas nos resultados das manipulações

return;

Seu código deve se comportar conforme o exemplo abaixo:
No interpretador python faça:

Para importar a função:
import pf_interpreter as pf

Para avaliar apenas uma combinação:
pf.interpreter(0b10110111)
10110111 --> - 1.0111 x 2^0 --> -1.4375

ou
pf.interpreter(0xB7)
10110111 --> - 1.0111 x 2^0 --> -1.4375

ou
pf.interpreter(183)
10110111 --> - 1.0111 x 2^0 --> -1.4375

Para o envio coloque o arquivo pf_interpreter dentro de uma pasta de nome <número da chamada>_<SeuNome>
Exemplo: 32_LuizPaulo
coloque quantos nomes e sobrenomes forem necessários para não confundir sempre sem espaços usando Maíusculas
Exemplo: 32_LuizPaulo
	 33_LuizPauloBarbosa

Dentro da pasta coloque o arquivo pf_interperter.py e compacte usando zip
Exemplo:
32_LuizPaulo.zip (.zip e não .rar) 

Para testar seu código quando terminar execute pf_usage.py

Isso vai chamar a função passando como parâmetro 
todos os números entre 0x00 e 0xFF e deve produzir a seguinte saída se tudo estiver correto:

Impressão de toda a faixa representável:

11111111 --> NAN
11111110 --> NAN
11111101 --> NAN
11111100 --> NAN
11111011 --> NAN
11111010 --> NAN
11111001 --> NAN
11111000 --> indetermination
11110111 --> NAN
11110110 --> NAN
11110101 --> NAN
11110100 --> NAN
11110011 --> NAN
11110010 --> NAN
11110001 --> NAN
11110000 --> -infinity
11101111 --> - 1.1111 x 2^3 --> -15.5
11101110 --> - 1.1110 x 2^3 --> -15.0
11101101 --> - 1.1101 x 2^3 --> -14.5
11101100 --> - 1.1100 x 2^3 --> -14.0
11101011 --> - 1.1011 x 2^3 --> -13.5
11101010 --> - 1.1010 x 2^3 --> -13.0
11101001 --> - 1.1001 x 2^3 --> -12.5
11101000 --> - 1.1000 x 2^3 --> -12.0
11100111 --> - 1.0111 x 2^3 --> -11.5
11100110 --> - 1.0110 x 2^3 --> -11.0
11100101 --> - 1.0101 x 2^3 --> -10.5
11100100 --> - 1.0100 x 2^3 --> -10.0
11100011 --> - 1.0011 x 2^3 --> -9.5
11100010 --> - 1.0010 x 2^3 --> -9.0
11100001 --> - 1.0001 x 2^3 --> -8.5
11100000 --> - 1.0000 x 2^3 --> -8.0
11011111 --> - 1.1111 x 2^2 --> -7.75
11011110 --> - 1.1110 x 2^2 --> -7.5
11011101 --> - 1.1101 x 2^2 --> -7.25
11011100 --> - 1.1100 x 2^2 --> -7.0
11011011 --> - 1.1011 x 2^2 --> -6.75
11011010 --> - 1.1010 x 2^2 --> -6.5
11011001 --> - 1.1001 x 2^2 --> -6.25
11011000 --> - 1.1000 x 2^2 --> -6.0
11010111 --> - 1.0111 x 2^2 --> -5.75
11010110 --> - 1.0110 x 2^2 --> -5.5
11010101 --> - 1.0101 x 2^2 --> -5.25
11010100 --> - 1.0100 x 2^2 --> -5.0
11010011 --> - 1.0011 x 2^2 --> -4.75
11010010 --> - 1.0010 x 2^2 --> -4.5
11010001 --> - 1.0001 x 2^2 --> -4.25
11010000 --> - 1.0000 x 2^2 --> -4.0
11001111 --> - 1.1111 x 2^1 --> -3.875
11001110 --> - 1.1110 x 2^1 --> -3.75
11001101 --> - 1.1101 x 2^1 --> -3.625
11001100 --> - 1.1100 x 2^1 --> -3.5
11001011 --> - 1.1011 x 2^1 --> -3.375
11001010 --> - 1.1010 x 2^1 --> -3.25
11001001 --> - 1.1001 x 2^1 --> -3.125
11001000 --> - 1.1000 x 2^1 --> -3.0
11000111 --> - 1.0111 x 2^1 --> -2.875
11000110 --> - 1.0110 x 2^1 --> -2.75
11000101 --> - 1.0101 x 2^1 --> -2.625
11000100 --> - 1.0100 x 2^1 --> -2.5
11000011 --> - 1.0011 x 2^1 --> -2.375
11000010 --> - 1.0010 x 2^1 --> -2.25
11000001 --> - 1.0001 x 2^1 --> -2.125
11000000 --> - 1.0000 x 2^1 --> -2.0
10111111 --> - 1.1111 x 2^0 --> -1.9375
10111110 --> - 1.1110 x 2^0 --> -1.875
10111101 --> - 1.1101 x 2^0 --> -1.8125
10111100 --> - 1.1100 x 2^0 --> -1.75
10111011 --> - 1.1011 x 2^0 --> -1.6875
10111010 --> - 1.1010 x 2^0 --> -1.625
10111001 --> - 1.1001 x 2^0 --> -1.5625
10111000 --> - 1.1000 x 2^0 --> -1.5
10110111 --> - 1.0111 x 2^0 --> -1.4375
10110110 --> - 1.0110 x 2^0 --> -1.375
10110101 --> - 1.0101 x 2^0 --> -1.3125
10110100 --> - 1.0100 x 2^0 --> -1.25
10110011 --> - 1.0011 x 2^0 --> -1.1875
10110010 --> - 1.0010 x 2^0 --> -1.125
10110001 --> - 1.0001 x 2^0 --> -1.0625
10110000 --> - 1.0000 x 2^0 --> -1.0
10101111 --> - 1.1111 x 2^-1 --> -0.96875
10101110 --> - 1.1110 x 2^-1 --> -0.9375
10101101 --> - 1.1101 x 2^-1 --> -0.90625
10101100 --> - 1.1100 x 2^-1 --> -0.875
10101011 --> - 1.1011 x 2^-1 --> -0.84375
10101010 --> - 1.1010 x 2^-1 --> -0.8125
10101001 --> - 1.1001 x 2^-1 --> -0.78125
10101000 --> - 1.1000 x 2^-1 --> -0.75
10100111 --> - 1.0111 x 2^-1 --> -0.71875
10100110 --> - 1.0110 x 2^-1 --> -0.6875
10100101 --> - 1.0101 x 2^-1 --> -0.65625
10100100 --> - 1.0100 x 2^-1 --> -0.625
10100011 --> - 1.0011 x 2^-1 --> -0.59375
10100010 --> - 1.0010 x 2^-1 --> -0.5625
10100001 --> - 1.0001 x 2^-1 --> -0.53125
10100000 --> - 1.0000 x 2^-1 --> -0.5
10011111 --> - 1.1111 x 2^-2 --> -0.484375
10011110 --> - 1.1110 x 2^-2 --> -0.46875
10011101 --> - 1.1101 x 2^-2 --> -0.453125
10011100 --> - 1.1100 x 2^-2 --> -0.4375
10011011 --> - 1.1011 x 2^-2 --> -0.421875
10011010 --> - 1.1010 x 2^-2 --> -0.40625
10011001 --> - 1.1001 x 2^-2 --> -0.390625
10011000 --> - 1.1000 x 2^-2 --> -0.375
10010111 --> - 1.0111 x 2^-2 --> -0.359375
10010110 --> - 1.0110 x 2^-2 --> -0.34375
10010101 --> - 1.0101 x 2^-2 --> -0.328125
10010100 --> - 1.0100 x 2^-2 --> -0.3125
10010011 --> - 1.0011 x 2^-2 --> -0.296875
10010010 --> - 1.0010 x 2^-2 --> -0.28125
10010001 --> - 1.0001 x 2^-2 --> -0.265625
10010000 --> - 1.0000 x 2^-2 --> -0.25
10001111 --> - 0.1111 x 2^-2 --> -0.234375
10001110 --> - 0.1110 x 2^-2 --> -0.21875
10001101 --> - 0.1101 x 2^-2 --> -0.203125
10001100 --> - 0.1100 x 2^-2 --> -0.1875
10001011 --> - 0.1011 x 2^-2 --> -0.171875
10001010 --> - 0.1010 x 2^-2 --> -0.15625
10001001 --> - 0.1001 x 2^-2 --> -0.140625
10001000 --> - 0.1000 x 2^-2 --> -0.125
10000111 --> - 0.0111 x 2^-2 --> -0.109375
10000110 --> - 0.0110 x 2^-2 --> -0.09375
10000101 --> - 0.0101 x 2^-2 --> -0.078125
10000100 --> - 0.0100 x 2^-2 --> -0.0625
10000011 --> - 0.0011 x 2^-2 --> -0.046875
10000010 --> - 0.0010 x 2^-2 --> -0.03125
10000001 --> - 0.0001 x 2^-2 --> -0.015625
10000000 --> - 0.0000 x 2^-2 --> -0.0
00000000 --> + 0.0000 x 2^-2 --> +0.0
00000001 --> + 0.0001 x 2^-2 --> +0.015625
00000010 --> + 0.0010 x 2^-2 --> +0.03125
00000011 --> + 0.0011 x 2^-2 --> +0.046875
00000100 --> + 0.0100 x 2^-2 --> +0.0625
00000101 --> + 0.0101 x 2^-2 --> +0.078125
00000110 --> + 0.0110 x 2^-2 --> +0.09375
00000111 --> + 0.0111 x 2^-2 --> +0.109375
00001000 --> + 0.1000 x 2^-2 --> +0.125
00001001 --> + 0.1001 x 2^-2 --> +0.140625
00001010 --> + 0.1010 x 2^-2 --> +0.15625
00001011 --> + 0.1011 x 2^-2 --> +0.171875
00001100 --> + 0.1100 x 2^-2 --> +0.1875
00001101 --> + 0.1101 x 2^-2 --> +0.203125
00001110 --> + 0.1110 x 2^-2 --> +0.21875
00001111 --> + 0.1111 x 2^-2 --> +0.234375
00010000 --> + 1.0000 x 2^-2 --> +0.25
00010001 --> + 1.0001 x 2^-2 --> +0.265625
00010010 --> + 1.0010 x 2^-2 --> +0.28125
00010011 --> + 1.0011 x 2^-2 --> +0.296875
00010100 --> + 1.0100 x 2^-2 --> +0.3125
00010101 --> + 1.0101 x 2^-2 --> +0.328125
00010110 --> + 1.0110 x 2^-2 --> +0.34375
00010111 --> + 1.0111 x 2^-2 --> +0.359375
00011000 --> + 1.1000 x 2^-2 --> +0.375
00011001 --> + 1.1001 x 2^-2 --> +0.390625
00011010 --> + 1.1010 x 2^-2 --> +0.40625
00011011 --> + 1.1011 x 2^-2 --> +0.421875
00011100 --> + 1.1100 x 2^-2 --> +0.4375
00011101 --> + 1.1101 x 2^-2 --> +0.453125
00011110 --> + 1.1110 x 2^-2 --> +0.46875
00011111 --> + 1.1111 x 2^-2 --> +0.484375
00100000 --> + 1.0000 x 2^-1 --> +0.5
00100001 --> + 1.0001 x 2^-1 --> +0.53125
00100010 --> + 1.0010 x 2^-1 --> +0.5625
00100011 --> + 1.0011 x 2^-1 --> +0.59375
00100100 --> + 1.0100 x 2^-1 --> +0.625
00100101 --> + 1.0101 x 2^-1 --> +0.65625
00100110 --> + 1.0110 x 2^-1 --> +0.6875
00100111 --> + 1.0111 x 2^-1 --> +0.71875
00101000 --> + 1.1000 x 2^-1 --> +0.75
00101001 --> + 1.1001 x 2^-1 --> +0.78125
00101010 --> + 1.1010 x 2^-1 --> +0.8125
00101011 --> + 1.1011 x 2^-1 --> +0.84375
00101100 --> + 1.1100 x 2^-1 --> +0.875
00101101 --> + 1.1101 x 2^-1 --> +0.90625
00101110 --> + 1.1110 x 2^-1 --> +0.9375
00101111 --> + 1.1111 x 2^-1 --> +0.96875
00110000 --> + 1.0000 x 2^0 --> +1.0
00110001 --> + 1.0001 x 2^0 --> +1.0625
00110010 --> + 1.0010 x 2^0 --> +1.125
00110011 --> + 1.0011 x 2^0 --> +1.1875
00110100 --> + 1.0100 x 2^0 --> +1.25
00110101 --> + 1.0101 x 2^0 --> +1.3125
00110110 --> + 1.0110 x 2^0 --> +1.375
00110111 --> + 1.0111 x 2^0 --> +1.4375
00111000 --> + 1.1000 x 2^0 --> +1.5
00111001 --> + 1.1001 x 2^0 --> +1.5625
00111010 --> + 1.1010 x 2^0 --> +1.625
00111011 --> + 1.1011 x 2^0 --> +1.6875
00111100 --> + 1.1100 x 2^0 --> +1.75
00111101 --> + 1.1101 x 2^0 --> +1.8125
00111110 --> + 1.1110 x 2^0 --> +1.875
00111111 --> + 1.1111 x 2^0 --> +1.9375
01000000 --> + 1.0000 x 2^1 --> +2.0
01000001 --> + 1.0001 x 2^1 --> +2.125
01000010 --> + 1.0010 x 2^1 --> +2.25
01000011 --> + 1.0011 x 2^1 --> +2.375
01000100 --> + 1.0100 x 2^1 --> +2.5
01000101 --> + 1.0101 x 2^1 --> +2.625
01000110 --> + 1.0110 x 2^1 --> +2.75
01000111 --> + 1.0111 x 2^1 --> +2.875
01001000 --> + 1.1000 x 2^1 --> +3.0
01001001 --> + 1.1001 x 2^1 --> +3.125
01001010 --> + 1.1010 x 2^1 --> +3.25
01001011 --> + 1.1011 x 2^1 --> +3.375
01001100 --> + 1.1100 x 2^1 --> +3.5
01001101 --> + 1.1101 x 2^1 --> +3.625
01001110 --> + 1.1110 x 2^1 --> +3.75
01001111 --> + 1.1111 x 2^1 --> +3.875
01010000 --> + 1.0000 x 2^2 --> +4.0
01010001 --> + 1.0001 x 2^2 --> +4.25
01010010 --> + 1.0010 x 2^2 --> +4.5
01010011 --> + 1.0011 x 2^2 --> +4.75
01010100 --> + 1.0100 x 2^2 --> +5.0
01010101 --> + 1.0101 x 2^2 --> +5.25
01010110 --> + 1.0110 x 2^2 --> +5.5
01010111 --> + 1.0111 x 2^2 --> +5.75
01011000 --> + 1.1000 x 2^2 --> +6.0
01011001 --> + 1.1001 x 2^2 --> +6.25
01011010 --> + 1.1010 x 2^2 --> +6.5
01011011 --> + 1.1011 x 2^2 --> +6.75
01011100 --> + 1.1100 x 2^2 --> +7.0
01011101 --> + 1.1101 x 2^2 --> +7.25
01011110 --> + 1.1110 x 2^2 --> +7.5
01011111 --> + 1.1111 x 2^2 --> +7.75
01100000 --> + 1.0000 x 2^3 --> +8.0
01100001 --> + 1.0001 x 2^3 --> +8.5
01100010 --> + 1.0010 x 2^3 --> +9.0
01100011 --> + 1.0011 x 2^3 --> +9.5
01100100 --> + 1.0100 x 2^3 --> +10.0
01100101 --> + 1.0101 x 2^3 --> +10.5
01100110 --> + 1.0110 x 2^3 --> +11.0
01100111 --> + 1.0111 x 2^3 --> +11.5
01101000 --> + 1.1000 x 2^3 --> +12.0
01101001 --> + 1.1001 x 2^3 --> +12.5
01101010 --> + 1.1010 x 2^3 --> +13.0
01101011 --> + 1.1011 x 2^3 --> +13.5
01101100 --> + 1.1100 x 2^3 --> +14.0
01101101 --> + 1.1101 x 2^3 --> +14.5
01101110 --> + 1.1110 x 2^3 --> +15.0
01101111 --> + 1.1111 x 2^3 --> +15.5
01110000 --> +infinity
01110001 --> NAN
01110010 --> NAN
01110011 --> NAN
01110100 --> NAN
01110101 --> NAN
01110110 --> NAN
01110111 --> NAN
01111000 --> NAN
01111001 --> NAN
01111010 --> NAN
01111011 --> NAN
01111100 --> NAN
01111101 --> NAN
01111110 --> NAN

Para importar a função use:
                import pf_interpreter as pf

Para avaliar apenas uma combinação use:
                pf.interpreter(0b10110111)
10110111 --> - 1.0111 x 2^0 --> -1.4375

ou
                pf.interpreter(0xB7)
10110111 --> - 1.0111 x 2^0 --> -1.4375

ou
                pf.interpreter(183)
10110111 --> - 1.0111 x 2^0 --> -1.4375





























